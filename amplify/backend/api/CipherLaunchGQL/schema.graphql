input CreateCollectionInput {
  collection_id: String!
  name: String!
  project_id: String!
  s3_url: String!
  create_timestamp: String!
}

type Collection {
  collection_id: String!
  name: String!
  project_id: String!
  s3_url: String!
  create_timestamp: String!
}

input UpdateCollectionInput {
  collection_id: String!
  name: String
  project_id: String
  s3_url: String
  create_timestamp: String
}

input CreateProjectInput {
  project_id: String!
  user_id: String!
  name: String!
  create_timestamp: String!
}

type Project {
  project_id: String!
  user_id: String!
  name: String!
  create_timestamp: String!
}

input UpdateProjectInput {
  project_id: String!
  user_id: String
  name: String
  create_timestamp: String
}

input CreateTraitInput {
  trait_id: String!
  name: String!
  rarity: Float
  image_url: String
  project_id: String!
  layer_id: String
}

type Trait {
  trait_id: String!
  name: String!
  rarity: Float
  image_url: String
  project_id: String!
  layer_id: String
}

input UpdateTraitInput {
  trait_id: String!
  name: String
  rarity: Float
  image_url: String
  project_id: String
  layer_id: String
}

type Mutation {
  deleteCollection(collection_id: String!): Collection
  createCollection(createCollectionInput: CreateCollectionInput!): Collection
  updateCollection(updateCollectionInput: UpdateCollectionInput!): Collection
  deleteProject(project_id: String!): Project
  createProject(createProjectInput: CreateProjectInput!): Project
  updateProject(updateProjectInput: UpdateProjectInput!): Project
  deleteTrait(trait_id: String!): Trait
  createTrait(createTraitInput: CreateTraitInput!): Trait
  updateTrait(updateTraitInput: UpdateTraitInput!): Trait
  deleteLayer(layer_id: String!): Layer
  createLayer(createLayerInput: CreateLayerInput!): Layer
  updateLayer(updateLayerInput: UpdateLayerInput!): Layer
}

type Query {
  getCollection(collection_id: String!): Collection
  listCollections: [Collection]
  listCollectionsUnderProject(project_id: String!): [Collection]
  getProject(project_id: String!): Project
  listProjects: [Project]
  listProjectsUnderUser(user_id: String!): [Project]
  getTrait(trait_id: String!): Trait
  listTraits: [Trait]
  listTraitsUnderLayer(layer_id: String!): [Trait]
  getLayer(layer_id: String!): Layer
  listLayers: [Layer]
  listLayersUnderProject(project_id: String!): [Layer]

}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Subscription {
  onCreateCollection: Collection @aws_subscribe(mutations: ["createCollection"])
  onCreateProject: Project @aws_subscribe(mutations: ["createProject"])
  onCreateTrait: Trait @aws_subscribe(mutations: ["createTrait"])
  onCreateLayer: Layer @aws_subscribe(mutations: ["createLayer"])
}

input CreateLayerInput {
  name: String!
  project_id: String!
  layer_id: String!
  layer_order: Int
}

type Layer {
  name: String!
  project_id: String!
  layer_id: String!
  layer_order: Int
}

input UpdateLayerInput {
  name: String
  project_id: String
  layer_id: String!
  layer_order: Int
}
