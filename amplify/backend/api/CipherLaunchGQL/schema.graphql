input CreateCollectionInput {
  collection_id: String!
  images_generated: Boolean!
  name: String!
  num_of_tokens: Int!
  project_id: String!
  create_timestamp: String!
}

type Collection @aws_api_key @aws_iam {
  collection_id: String!
  images_generated: Boolean!
  name: String!
  num_of_tokens: Int!
  project_id: String!
  create_timestamp: String!
}

input UpdateCollectionInput {
  collection_id: String!
  images_generated: Boolean
  name: String
  num_of_tokens: Int
  project_id: String
  create_timestamp: String
}

input CreateIncompatibilityInput {
  trait_1_id: String!
  trait_2_id: String!
  project_id: String!
  incompatibility_id: String!
}

type Incompatibility  @aws_api_key @aws_iam {
  trait_1_id: String!
  trait_2_id: String!
  project_id: String!
  incompatibility_id: String!
}

input UpdateIncompatibilityInput {
  trait_1_id: String
  trait_2_id: String
  project_id: String
  incompatibility_id: String!
}

input CreateProjectInput {
  project_id: String!
  user_id: String!
  name: String!
  create_timestamp: String!
}

type Project   @aws_api_key @aws_iam {
  project_id: String!
  user_id: String!
  name: String!
  create_timestamp: String!
}

input UpdateProjectInput {
  project_id: String!
  user_id: String
  name: String
  create_timestamp: String
}

input CreateTraitInput {
  trait_id: String!
  name: String!
  rarity: Float
  image_url: String
  project_id: String!
  layer_id: String
}

type Trait   @aws_api_key @aws_iam {
  trait_id: String!
  name: String!
  rarity: Float
  image_url: String
  project_id: String!
  layer_id: String
}

input UpdateTraitInput {
  trait_id: String!
  name: String
  rarity: Float
  image_url: String
  project_id: String
  layer_id: String
}

type Mutation {
  deleteCollection(collection_id: String!): Collection
  createCollection(createCollectionInput: CreateCollectionInput!): Collection
  updateCollection(updateCollectionInput: UpdateCollectionInput!): Collection
  deleteIncompatibility(incompatibility_id: String!): Incompatibility
  createIncompatibility(createIncompatibilityInput: CreateIncompatibilityInput!): Incompatibility
  updateIncompatibility(updateIncompatibilityInput: UpdateIncompatibilityInput!): Incompatibility
  deleteProject(project_id: String!): Project
  createProject(createProjectInput: CreateProjectInput!): Project
  updateProject(updateProjectInput: UpdateProjectInput!): Project
  deleteTrait(trait_id: String!): Trait
  createTrait(createTraitInput: CreateTraitInput!): Trait
  updateTrait(updateTraitInput: UpdateTraitInput!): Trait
  deleteLayer(layer_id: String!): Layer
  createLayer(createLayerInput: CreateLayerInput!): Layer
  updateLayer(updateLayerInput: UpdateLayerInput!): Layer
  @aws_api_key @aws_iam

}

type Query {
  getCollection(collection_id: String!): Collection
  listCollections: [Collection]
  listCollectionsUnderProject(project_id: String!): [Collection]
  getIncompatibility(incompatibility_id: String!): Collection
  listIncompatibilities: [Incompatibility]
  listIncompatibilitiesUnderProject(project_id: String!): [Incompatibility]
  listIncompatibilitiesWithTrait(trait_id: String!): [Incompatibility]
  getProject(project_id: String!): Project
  listProjects: [Project]
  listProjectsUnderUser(user_id: String!): [Project]
  getTrait(trait_id: String!): Trait
  listTraits: [Trait]
  listTraitsUnderLayer(layer_id: String!): [Trait]
  getLayer(layer_id: String!): Layer
  listLayers: [Layer]
  listLayersUnderProject(project_id: String!): [Layer]
  @aws_api_key @aws_iam
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Subscription {
  onCreateCollection: Collection @aws_subscribe(mutations: ["createCollection"])
  onCreateIncompatibility: Incompatibility @aws_subscribe(mutations: ["createIncompatibility"])
  onCreateProject: Project @aws_subscribe(mutations: ["createProject"])
  onCreateTrait: Trait @aws_subscribe(mutations: ["createTrait"])
  onCreateLayer: Layer @aws_subscribe(mutations: ["createLayer"])
  @aws_api_key @aws_iam

}

input CreateLayerInput {
  name: String!
  project_id: String!
  layer_id: String!
  layer_order: Int
}

type Layer @aws_api_key @aws_iam {
  name: String!
  project_id: String!
  layer_id: String!
  layer_order: Int
}

input UpdateLayerInput {
  name: String
  project_id: String
  layer_id: String!
  layer_order: Int
}
